--
-- Script was generated by Devart dbForge Studio 2020 for MySQL, Version 9.0.689.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 7/11/2021 02:01:28
-- Server version: 8.0.27
-- Client version: 4.1
--

-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set SQL mode
-- 
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

--
-- Set default database
--
USE bd_techno_factory;

--
-- Drop procedure `configuracion`
--
DROP PROCEDURE IF EXISTS configuracion;

--
-- Drop procedure `add_detalle_temp`
--
DROP PROCEDURE IF EXISTS add_detalle_temp;

--
-- Drop procedure `del_detalle_temp`
--
DROP PROCEDURE IF EXISTS del_detalle_temp;

--
-- Drop procedure `procesar_venta`
--
DROP PROCEDURE IF EXISTS procesar_venta;

--
-- Drop table `detalleTemporal`
--
DROP TABLE IF EXISTS detalleTemporal;

--
-- Drop procedure `EditarUsuario`
--
DROP PROCEDURE IF EXISTS EditarUsuario;

--
-- Drop procedure `ListarUsuarios`
--
DROP PROCEDURE IF EXISTS ListarUsuarios;

--
-- Drop procedure `Login`
--
DROP PROCEDURE IF EXISTS Login;

--
-- Drop procedure `RegistrarUsuarios`
--
DROP PROCEDURE IF EXISTS RegistrarUsuarios;

--
-- Drop table `Usuarios`
--
DROP TABLE IF EXISTS Usuarios;

--
-- Drop table `Cargos`
--
DROP TABLE IF EXISTS Cargos;

--
-- Drop procedure `Factura`
--
DROP PROCEDURE IF EXISTS Factura;

--
-- Drop procedure `ListarVentas`
--
DROP PROCEDURE IF EXISTS ListarVentas;

--
-- Drop table `DetalleVentas`
--
DROP TABLE IF EXISTS DetalleVentas;

--
-- Drop procedure `AccionesProductos`
--
DROP PROCEDURE IF EXISTS AccionesProductos;

--
-- Drop procedure `actualizar_precio_producto`
--
DROP PROCEDURE IF EXISTS actualizar_precio_producto;

--
-- Drop procedure `ListarProductos`
--
DROP PROCEDURE IF EXISTS ListarProductos;

--
-- Drop table `Productos`
--
DROP TABLE IF EXISTS Productos;

--
-- Drop procedure `CategoriasYMas`
--
DROP PROCEDURE IF EXISTS CategoriasYMas;

--
-- Drop table `Categorias`
--
DROP TABLE IF EXISTS Categorias;

--
-- Drop table `Ventas`
--
DROP TABLE IF EXISTS Ventas;

--
-- Drop procedure `AccionesClientes`
--
DROP PROCEDURE IF EXISTS AccionesClientes;

--
-- Drop table `Clientes`
--
DROP TABLE IF EXISTS Clientes;

--
-- Drop procedure `AccionesEmpleados`
--
DROP PROCEDURE IF EXISTS AccionesEmpleados;

--
-- Drop table `Empleados`
--
DROP TABLE IF EXISTS Empleados;

--
-- Drop table `Modelos`
--
DROP TABLE IF EXISTS Modelos;

--
-- Drop table `Marcas`
--
DROP TABLE IF EXISTS Marcas;

--
-- Drop table `Estados`
--
DROP TABLE IF EXISTS Estados;

--
-- Set default database
--
USE bd_techno_factory;

--
-- Create table `Estados`
--
CREATE TABLE IF NOT EXISTS Estados (
  idEstado int NOT NULL AUTO_INCREMENT,
  estado varchar(50) NOT NULL,
  PRIMARY KEY (idEstado)
)
ENGINE = INNODB,
AUTO_INCREMENT = 3,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create table `Marcas`
--
CREATE TABLE IF NOT EXISTS Marcas (
  idMarca int NOT NULL AUTO_INCREMENT,
  descripcionMarca varchar(50) NOT NULL,
  idEstado int DEFAULT NULL,
  PRIMARY KEY (idMarca)
)
ENGINE = INNODB,
AUTO_INCREMENT = 9,
AVG_ROW_LENGTH = 2730,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE Marcas
ADD CONSTRAINT FKMarca_Estado FOREIGN KEY (idEstado)
REFERENCES Estados (idEstado);

--
-- Create table `Modelos`
--
CREATE TABLE IF NOT EXISTS Modelos (
  idModelo int NOT NULL AUTO_INCREMENT,
  descripcionModelo varchar(50) NOT NULL,
  idMarca int DEFAULT NULL,
  idEstado int DEFAULT NULL,
  PRIMARY KEY (idModelo)
)
ENGINE = INNODB,
AUTO_INCREMENT = 15,
AVG_ROW_LENGTH = 2730,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE Modelos
ADD CONSTRAINT Fk_Estado FOREIGN KEY (idEstado)
REFERENCES Estados (idEstado);

--
-- Create foreign key
--
ALTER TABLE Modelos
ADD CONSTRAINT Modelos_ibfk_1 FOREIGN KEY (idMarca)
REFERENCES Marcas (idMarca);

--
-- Create table `Empleados`
--
CREATE TABLE IF NOT EXISTS Empleados (
  idEmpleado int NOT NULL AUTO_INCREMENT,
  dni varchar(45) DEFAULT NULL,
  nombreEmpleado varchar(50) NOT NULL,
  apellidoEmpleado varchar(50) NOT NULL,
  genero varchar(30) NOT NULL,
  fechaNacimiento date NOT NULL,
  fechaRegistro datetime DEFAULT CURRENT_TIMESTAMP,
  idEstado int DEFAULT NULL,
  PRIMARY KEY (idEmpleado)
)
ENGINE = INNODB,
AUTO_INCREMENT = 8,
AVG_ROW_LENGTH = 2730,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE Empleados
ADD CONSTRAINT Empleados_ibfk_1 FOREIGN KEY (idEstado)
REFERENCES Estados (idEstado);

DELIMITER $$

--
-- Create procedure `AccionesEmpleados`
--
CREATE
DEFINER = 'luis'@'%'
PROCEDURE AccionesEmpleados (IN id int, IN Accion varchar(50), IN txtDni varchar(50), IN nombre varchar(50), IN apellido varchar(50), IN gen varchar(50), IN fechaNac date, IN estado int)
BEGIN
  DECLARE ExistEmpleado int;
  DECLARE Edad int;
  SET Edad = (SELECT
      TIMESTAMPDIFF(year, fechaNac, CURDATE()) AS edad);
  SET ExistEmpleado = (SELECT
      COUNT(*)
    FROM Empleados
    WHERE dni = txtDni);
  IF (Accion = 'G') THEN
    IF (ExistEmpleado > 0) THEN
      SELECT
        'El Empleado ya existe...' AS msj;
    ELSE
      IF (Edad < 18) THEN
        SELECT
          'Debe tener una edad minima de 18 años...' AS msj;
      ELSE
        INSERT INTO Empleados (dni, nombreEmpleado, apellidoEmpleado, genero, fechaNacimiento, idEstado)
          VALUES (txtDni, nombre, apellido, gen, fechaNac, estado);
        SELECT
          'Empleado Registrado con éxito...' AS msj;
      END IF;
    END IF;
  ELSE

    IF (Edad < 18) THEN
      SELECT
        'Debe tener una edad minima de 18 años...' AS msj;
    ELSE
      UPDATE Empleados
      SET dni = txtDni,
          nombreEmpleado = nombre,
          apellidoEmpleado = apellido,
          genero = gen,
          fechaNacimiento = fechaNac,
          idEstado = estado
      WHERE idEmpleado = id;
      SELECT
        'Datos actualiados con éxito...' AS msj;
    END IF;
  END IF;


END
$$

DELIMITER ;

--
-- Create table `Clientes`
--
CREATE TABLE IF NOT EXISTS Clientes (
  idCliente int NOT NULL AUTO_INCREMENT,
  dni varchar(13) NOT NULL,
  nombreCliente varchar(50) NOT NULL,
  apellidoCliente varchar(50) NOT NULL,
  genero varchar(30) NOT NULL,
  fechaNacimiento date NOT NULL,
  fechaRegistro datetime DEFAULT CURRENT_TIMESTAMP,
  idEstado int DEFAULT NULL,
  PRIMARY KEY (idCliente)
)
ENGINE = INNODB,
AUTO_INCREMENT = 6,
AVG_ROW_LENGTH = 4096,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE Clientes
ADD CONSTRAINT Clientes_ibfk_1 FOREIGN KEY (idEstado)
REFERENCES Estados (idEstado);

DELIMITER $$

--
-- Create procedure `AccionesClientes`
--
CREATE
DEFINER = 'luis'@'%'
PROCEDURE AccionesClientes (IN id int, IN Accion varchar(50), IN txtDni varchar(50), IN nombre varchar(50), IN apellido varchar(50), IN gen varchar(50), IN fechaNac date, IN estado int)
BEGIN
  DECLARE ExistCliente int;
  DECLARE Edad int;
  SET Edad = (SELECT
      TIMESTAMPDIFF(year, fechaNac, CURDATE()) AS edad);
  SET ExistCliente = (SELECT
      COUNT(*)
    FROM Clientes
    WHERE dni = txtDni);
  IF (Accion = 'G') THEN
    IF (ExistCliente > 0) THEN
      SELECT
        'El Cliente ya existe...' AS msj;
    ELSE
      IF (Edad < 18) THEN
        SELECT
          'Debe tener una edad minima de 18 años...' AS msj;
      ELSE
        INSERT INTO Clientes (dni, nombreCliente, apellidoCliente, genero, fechaNacimiento, idEstado)
          VALUES (txtDni, nombre, apellido, gen, fechaNac, estado);
        SELECT
          'Cliente Registrado con éxito...' AS msj;
      END IF;
    END IF;
  ELSE
    SET ExistCliente = (SELECT
        COUNT(*)
      FROM Clientes
      WHERE idCliente = id);
    IF (ExistCliente = 0) THEN
      SELECT
        'El cliente no existe...' AS msj;
    ELSE
      IF (Edad < 18) THEN
        SELECT
          'Debe tener una edad minima de 18 años...' AS msj;
      ELSE
        UPDATE Clientes
        SET dni = txtDni,
            nombreCliente = nombre,
            apellidoCliente = apellido,
            genero = gen,
            fechaNacimiento = fechaNac,
            idEstado = estado
        WHERE idCliente = id;
        SELECT
          'Datos actualiados con éxito...' AS msj;
      END IF;
    END IF;
  END IF;

END
$$

DELIMITER ;

--
-- Create table `Ventas`
--
CREATE TABLE IF NOT EXISTS Ventas (
  idVenta int NOT NULL AUTO_INCREMENT,
  fechaVenta datetime DEFAULT CURRENT_TIMESTAMP,
  idCliente int DEFAULT NULL,
  idEmpleado int DEFAULT NULL,
  isv decimal(10, 2) DEFAULT NULL,
  descuento decimal(10, 2) DEFAULT NULL,
  subTotal decimal(10, 2) DEFAULT NULL,
  PRIMARY KEY (idVenta)
)
ENGINE = INNODB,
AUTO_INCREMENT = 84,
AVG_ROW_LENGTH = 240,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `Ventas_Empleados_idx` on table `Ventas`
--
ALTER TABLE Ventas
ADD INDEX Ventas_Empleados_idx (idEmpleado);

--
-- Create foreign key
--
ALTER TABLE Ventas
ADD CONSTRAINT Ventas_Empleados FOREIGN KEY (idEmpleado)
REFERENCES Empleados (idEmpleado);

--
-- Create foreign key
--
ALTER TABLE Ventas
ADD CONSTRAINT Ventas_ibfk_1 FOREIGN KEY (idCliente)
REFERENCES Clientes (idCliente);

--
-- Create table `Categorias`
--
CREATE TABLE IF NOT EXISTS Categorias (
  idCategoria int NOT NULL AUTO_INCREMENT,
  descripcionCategoria varchar(50) NOT NULL,
  idEstado int DEFAULT NULL,
  PRIMARY KEY (idCategoria)
)
ENGINE = INNODB,
AUTO_INCREMENT = 9,
AVG_ROW_LENGTH = 3276,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE Categorias
ADD CONSTRAINT FKEstado FOREIGN KEY (idEstado)
REFERENCES Estados (idEstado);

DELIMITER $$

--
-- Create procedure `CategoriasYMas`
--
CREATE
DEFINER = 'luis'@'%'
PROCEDURE CategoriasYMas (IN accion varchar(2), IN tabla varchar(2), IN codMarca int, IN marca varchar(50), IN codModelo int, IN modelo varchar(255), IN codCategoria int, IN categoria varchar(255), IN estado int)
BEGIN
  DECLARE existModelo int;
  DECLARE existMarca int;
  DECLARE existCategoria int;
  IF (accion = 'G') THEN

    IF (tabla = 'Mo') THEN
      SET existModelo = (SELECT
          COUNT(*)
        FROM Modelos m
        WHERE m.descripcionModelo = modelo);
      IF (existModelo > 0) THEN
        SELECT
          'El modelo ya esta registrado' AS msj;
      ELSE
        INSERT INTO Modelos (descripcionModelo, idMarca, idEstado)
          VALUES (modelo, codMarca, estado);
        SELECT
          'Modelo regsitrado con éxito' AS msj;
      END IF;
    ELSEIF (tabla = 'M') THEN
      SET existMarca = (SELECT
          COUNT(*)
        FROM Marcas m
        WHERE m.descripcionMarca = marca);
      IF (existMarca > 0) THEN
        SELECT
          'La marca ya esta registrado' AS msj;
      ELSE
        INSERT INTO Marcas (descripcionMarca, idEstado)
          VALUES (marca, estado);
        SELECT
          'La marca se registro con éxito' AS msj;
      END IF;

    ELSE

      SET existCategoria = (SELECT
          COUNT(*)
        FROM Categorias c
        WHERE c.descripcionCategoria = categoria);
      IF (existCategoria > 0) THEN
        SELECT
          'La Categoria ya esta registrada' AS msj;
      ELSE
        INSERT INTO Categorias (descripcionCategoria, idEstado)
          VALUE (categoria, estado);
        SELECT
          'La categoria se registro con éxito' AS msj;
      END IF;
    END IF;

  ELSE

    IF (tabla = 'Mo') THEN
      SET existModelo = (SELECT
          COUNT(*)
        FROM Modelos m
        WHERE m.idModelo = codModelo);
      IF (existModelo = 0) THEN
        SELECT
          'El modelo no esta registrado' AS msj;
      ELSE
        UPDATE Modelos m
        SET m.descripcionModelo = modelo,
            m.idMarca = codMarca,
            m.idEstado = estado
        WHERE m.idModelo = codModelo;
        SELECT
          'Modelo actualizado con éxito' AS msj;
      END IF;
    ELSEIF (tabla = 'M') THEN
      SET existMarca = (SELECT
          COUNT(*)
        FROM Marcas m
        WHERE m.idMarca = codMarca);
      IF (existMarca = 0) THEN
        SELECT
          'La marca no esta registrado' AS msj;
      ELSE
        UPDATE Marcas m
        SET m.descripcionMarca = marca,
            m.idEstado = estado
        WHERE m.idMarca = codMarca;
        SELECT
          'La marca se actualizo con éxito' AS msj;
      END IF;

    ELSE

      SET existCategoria = (SELECT
          COUNT(*)
        FROM Categorias c
        WHERE c.idCategoria = codCategoria);
      IF (existCategoria = 0) THEN
        SELECT
          'La Categoria no esta registrada' AS msj;
      ELSE
        UPDATE Categorias c
        SET c.descripcionCategoria = categoria,
            c.idEstado = estado
        WHERE c.idCategoria = codCategoria;
        SELECT
          'La categoria se actualizo con éxito' AS msj;
      END IF;
    END IF;


  END IF;



END
$$

DELIMITER ;

--
-- Create table `Productos`
--
CREATE TABLE IF NOT EXISTS Productos (
  idProducto int NOT NULL AUTO_INCREMENT,
  nombreProducto varchar(50) NOT NULL,
  descripcionProducto varchar(2000) NOT NULL,
  cantidadExistencia int NOT NULL,
  idCategoria int DEFAULT NULL,
  idEstado int DEFAULT NULL,
  precioEstandar decimal(10, 2) NOT NULL,
  precioVenta decimal(10, 2) NOT NULL,
  idModelo int DEFAULT NULL,
  PRIMARY KEY (idProducto)
)
ENGINE = INNODB,
AUTO_INCREMENT = 17,
AVG_ROW_LENGTH = 3276,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE Productos
ADD CONSTRAINT Productos_ibfk_1 FOREIGN KEY (idModelo)
REFERENCES Modelos (idModelo);

--
-- Create foreign key
--
ALTER TABLE Productos
ADD CONSTRAINT Productos_ibfk_2 FOREIGN KEY (idEstado)
REFERENCES Estados (idEstado);

--
-- Create foreign key
--
ALTER TABLE Productos
ADD CONSTRAINT Productos_ibfk_3 FOREIGN KEY (idCategoria)
REFERENCES Categorias (idCategoria);

DELIMITER $$

--
-- Create procedure `ListarProductos`
--
CREATE
DEFINER = 'luis'@'%'
PROCEDURE ListarProductos ()
BEGIN
  DECLARE i int;
  SET @row_number = 0;
  SELECT
    p.idProducto AS num,
    p.nombreProducto 'nombre',
    p.descripcionProducto 'descripcion',
    m.descripcionModelo 'modelo',
    ma.descripcionMarca 'marca',
    c.descripcionCategoria 'categoria',
    p.cantidadExistencia 'cantidad',
    p.precioVenta 'precio',
    e.estado
  FROM Productos p
    JOIN Modelos m
      ON m.idModelo = p.idModelo
    JOIN Marcas ma
      ON ma.idMarca = m.idMarca
    JOIN Categorias c
      ON c.idCategoria = p.idCategoria
    JOIN Estados e
      ON e.idEstado = p.idEstado;

END
$$

--
-- Create procedure `actualizar_precio_producto`
--
CREATE
DEFINER = 'luis'@'%'
PROCEDURE actualizar_precio_producto (IN `n_cantidad` int, IN `n_precio` decimal(10, 2), IN `codigo` int)
BEGIN
  DECLARE nueva_existencia int;
  DECLARE nuevo_total decimal(10, 2);
  DECLARE nuevo_precio decimal(10, 2);

  DECLARE cant_actual int;
  DECLARE pre_actual decimal(10, 2);

  DECLARE actual_existencia int;
  DECLARE actual_precio decimal(10, 2);

  SELECT
    precioVenta,
    cantidadExistencia INTO actual_precio, actual_existencia
  FROM Productos
  WHERE idProducto = codigo;

  SET nueva_existencia = actual_existencia + n_cantidad;
  SET nuevo_total = n_precio;
  SET nuevo_precio = nuevo_total;

  UPDATE Productos
  SET cantidadExistencia = nueva_existencia,
      precioEstandar = nuevo_precio
  WHERE idProducto = codigo;

  SELECT
    nueva_existencia,
    nuevo_precio;
END
$$

--
-- Create procedure `AccionesProductos`
--
CREATE
DEFINER = 'luis'@'%'
PROCEDURE AccionesProductos (IN accion varchar(50), IN id int, IN nombre varchar(50), IN descripcion varchar(2000), IN cantidad int, IN categoria int, IN estado int, IN estandar decimal(10, 2), IN venta decimal(10, 2), IN modelo int)
BEGIN
  DECLARE ExistNombre varchar(50);
  SET ExistNombre = (SELECT
      COUNT(*)
    FROM Productos
    WHERE nombreProducto = nombre);
  IF (accion = 'G') THEN

    IF (ExistNombre > 0) THEN
      SELECT
        'El Producto ya se encuentra registrado...' AS msj;
    ELSE
      IF (cantidad < 0) THEN
        SELECT
          'La cantidad debe ser mayor o igual a 0...' AS msj;
      ELSE
        IF (estandar <= 0
          OR venta <= 0) THEN
          SELECT
            'El precio debe ser mayor a 0...' AS msj;
        ELSE
          INSERT INTO `bd_techno_factory`.`Productos` (`nombreProducto`,
          `descripcionProducto`,
          `cantidadExistencia`,
          `idCategoria`,
          `idEstado`,
          `precioEstandar`,
          `precioVenta`,
          `idModelo`)
            VALUES (nombre, descripcion, cantidad, categoria, estado, estandar, venta, modelo);
          SELECT
            'Producto registrado con éxito...' AS msj;
        END IF;
      END IF;
    END IF;

  ELSE


    IF (cantidad < 0) THEN
      SELECT
        'La cantidad debe ser mayor o igual a 0...' AS msj;
    ELSE
      IF (estandar <= 0
        OR venta <= 0) THEN
        SELECT
          'El precio debe ser mayor a 0...' AS msj;
      ELSE
        UPDATE Productos
        SET nombreProducto = nombre,
            descripcionProducto = descripcion,
            cantidadExistencia = cantidad,
            idCategoria = categoria,
            idEstado = estado,
            precioEstandar = estandar,
            precioVenta = venta,
            idModelo = modelo
        WHERE idProducto = id;
        SELECT
          'Producto actualizado con éxito...' AS msj;
      END IF;
    END IF;


  END IF;


END
$$

DELIMITER ;

--
-- Create table `DetalleVentas`
--
CREATE TABLE IF NOT EXISTS DetalleVentas (
  idDetalle int NOT NULL AUTO_INCREMENT,
  idVenta int NOT NULL,
  idProducto int NOT NULL,
  cantidad int NOT NULL,
  precio decimal(10, 2) NOT NULL,
  PRIMARY KEY (idVenta, idDetalle),
  INDEX idDetalle (idDetalle)
)
ENGINE = INNODB,
AUTO_INCREMENT = 123,
AVG_ROW_LENGTH = 163,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE DetalleVentas
ADD CONSTRAINT DetalleVentas_ibfk_1 FOREIGN KEY (idProducto)
REFERENCES Productos (idProducto);

--
-- Create foreign key
--
ALTER TABLE DetalleVentas
ADD CONSTRAINT DetalleVentas_ibfk_2 FOREIGN KEY (idVenta)
REFERENCES Ventas (idVenta);

DELIMITER $$

--
-- Create procedure `ListarVentas`
--
CREATE
DEFINER = 'luis'@'%'
PROCEDURE ListarVentas ()
BEGIN
  SELECT
    dv.idVenta 'no',
    v.fechaVenta 'fecha',
    CONCAT(c.nombreCliente, ' ', c.apellidoCliente) 'Cliente',
    p.nombreProducto 'nombre',
    dv.cantidad,
    dv.precio,
    SUM(dv.cantidad * dv.precio) 'SubTotal'
  FROM Ventas v
    JOIN DetalleVentas dv
      ON v.idVenta = dv.idVenta
    JOIN Productos p
      ON p.idProducto = dv.idProducto
    JOIN Clientes c
      ON c.idCliente = v.idCliente
    JOIN Empleados e
      ON e.idEmpleado = v.idEmpleado
  GROUP BY dv.idVenta,
           v.fechaVenta,
           p.nombreProducto,
           dv.cantidad,
           dv.precio,
           c.nombreCliente,
           c.apellidoCliente
  ORDER BY v.idVenta DESC;
END
$$

--
-- Create procedure `Factura`
--
CREATE
DEFINER = 'luis'@'%'
PROCEDURE Factura (IN noFactura int)
BEGIN
  SELECT
    d.idVenta 'nofactura',
    d.idProducto 'codproducto',
    d.cantidad,
    p.idProducto 'codproducto',
    p.nombreProducto 'descripcion',
    p.precioVenta 'precio'
  FROM DetalleVentas d
    INNER JOIN Productos p
      ON d.idVenta = noFactura
  WHERE d.idProducto = p.idProducto;
END
$$

DELIMITER ;

--
-- Create table `Cargos`
--
CREATE TABLE IF NOT EXISTS Cargos (
  idCargo int NOT NULL AUTO_INCREMENT,
  descripcionCargo varchar(50) NOT NULL,
  PRIMARY KEY (idCargo)
)
ENGINE = INNODB,
AUTO_INCREMENT = 5,
AVG_ROW_LENGTH = 4096,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create table `Usuarios`
--
CREATE TABLE IF NOT EXISTS Usuarios (
  idUsuario int NOT NULL AUTO_INCREMENT,
  nombreUsuario varchar(50) DEFAULT NULL,
  contrasenia varchar(50) DEFAULT NULL,
  idCargo int DEFAULT NULL,
  correoElectronico varchar(100) DEFAULT NULL,
  idEmpleado int DEFAULT NULL,
  idCliente int DEFAULT NULL,
  isEmpleado tinyint(1) DEFAULT NULL,
  PRIMARY KEY (idUsuario)
)
ENGINE = INNODB,
AUTO_INCREMENT = 9,
AVG_ROW_LENGTH = 4096,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE Usuarios
ADD CONSTRAINT Usuarios_ibfk_1 FOREIGN KEY (idCliente)
REFERENCES Clientes (idCliente);

--
-- Create foreign key
--
ALTER TABLE Usuarios
ADD CONSTRAINT Usuarios_ibfk_2 FOREIGN KEY (idCargo)
REFERENCES Cargos (idCargo);

--
-- Create foreign key
--
ALTER TABLE Usuarios
ADD CONSTRAINT Usuarios_ibfk_3 FOREIGN KEY (idEmpleado)
REFERENCES Empleados (idEmpleado);

DELIMITER $$

--
-- Create procedure `RegistrarUsuarios`
--
CREATE
DEFINER = 'luis'@'%'
PROCEDURE RegistrarUsuarios (IN nombreUser varchar(50), IN contra varchar(50), IN cargo int, IN correo varchar(100), IN codEmpleado int)
BEGIN

  DECLARE EmpleadoExistente int;
  DECLARE tieneUsuario int;
  SET tieneUsuario = (SELECT
      COUNT(*)
    FROM Usuarios
    WHERE idEmpleado = codEmpleado);
  SET EmpleadoExistente = (SELECT
      COUNT(*)
    FROM Empleados
    WHERE idEmpleado = codEmpleado);

  IF (EmpleadoExistente = 0) THEN
    SELECT
      'El Empleado no esta registrado en la base de datos' AS msj;
  ELSE
    IF (tieneUsuario > 0) THEN
      SELECT
        'El Empleado ya cuenta con un usuario registrado' AS msj;
    ELSE
      INSERT INTO Usuarios (nombreUsuario, contrasenia, idCargo, correoElectronico, idEmpleado, isEmpleado)
        VALUES (nombreUser, contra, cargo, correo, codEmpleado, 1);

      SELECT
        'Usuario Registrado con éxito' AS msj;
    END IF;
  END IF;

END
$$

--
-- Create procedure `Login`
--
CREATE
DEFINER = 'luis'@'%'
PROCEDURE Login (IN usuario varchar(50), IN contra varchar(50))
BEGIN

  SELECT
    COALESCE(c.idCliente, e.idEmpleado) 'id',
    COALESCE(c.nombreCliente, e.nombreEmpleado) 'nombre',
    COALESCE(c.apellidoCliente, e.apellidoEmpleado) 'apellido',
    u.nombreUsuario 'user',
    u.contrasenia 'contra',
    u.correoElectronico 'correo',
    ca.descripcionCargo 'cargo',
    u.isEmpleado
  FROM Usuarios u
    LEFT JOIN Empleados e
      ON e.idEmpleado = u.idEmpleado
    LEFT JOIN Clientes c
      ON c.idCliente = u.idCliente
    JOIN Cargos ca
      ON ca.idCargo = u.idCargo
  WHERE u.nombreUsuario = usuario
  AND u.contrasenia = contra;


END
$$

--
-- Create procedure `ListarUsuarios`
--
CREATE
DEFINER = 'luis'@'%'
PROCEDURE ListarUsuarios ()
BEGIN

  SET @row_number = 0;
  SELECT
    (@row_number := @row_number + 1) AS num,
    CONCAT(e.nombreEmpleado, ' ', e.apellidoEmpleado) AS nombre,
    u.correoElectronico AS Email,
    u.nombreUsuario 'user',
    c.descripcionCargo AS cargo,
    u.idUsuario
  FROM Usuarios u
    JOIN Empleados e
      ON u.idEmpleado = e.idEmpleado
    JOIN Cargos c
      ON c.idCargo = u.idCargo;

END
$$

--
-- Create procedure `EditarUsuario`
--
CREATE
DEFINER = 'luis'@'%'
PROCEDURE EditarUsuario (IN id int, IN nombreUser varchar(50), IN contra varchar(50), IN cargo int, IN correo varchar(100), IN codEmpleado int)
BEGIN
  UPDATE Usuarios
  SET nombreUsuario = nombreUser,
      contrasenia = contra,
      idCargo = cargo,
      idEmpleado = codEmpleado,
      correoElectronico = correo
  WHERE idUsuario = id;
  SELECT
    'La información del usuario se actualizo con éxito...' AS msj;
END
$$

DELIMITER ;

--
-- Create table `detalleTemporal`
--
CREATE TABLE IF NOT EXISTS detalleTemporal (
  idDetalle int NOT NULL AUTO_INCREMENT,
  token_user varchar(45) NOT NULL,
  idProducto int NOT NULL,
  cantidad int NOT NULL,
  precio decimal(10, 2) NOT NULL,
  PRIMARY KEY (idDetalle)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

DELIMITER $$

--
-- Create procedure `procesar_venta`
--
CREATE
DEFINER = 'luis'@'%'
PROCEDURE procesar_venta (IN `cod_usuario` int, IN `cod_cliente` int, IN `token` varchar(50))
BEGIN
  DECLARE factura int;
  DECLARE registros int;
  DECLARE total decimal(10, 2);
  DECLARE nueva_existencia int;
  DECLARE existencia_actual int;

  DECLARE tmp_cod_producto int;
  DECLARE tmp_cant_producto int;
  DECLARE a int;
  SET a = 1;

  CREATE TEMPORARY TABLE tbl_tmp_tokenuser (
    id int NOT NULL AUTO_INCREMENT PRIMARY KEY,
    cod_prod bigint,
    cant_prod int
  );
  SET registros = (SELECT
      COUNT(*)
    FROM detalleTemporal
    WHERE token_user = token);
  IF registros > 0 THEN
    INSERT INTO tbl_tmp_tokenuser (cod_prod, cant_prod)
      SELECT
        idProducto,
        cantidad
      FROM detalleTemporal
      WHERE token_user = token;
    INSERT INTO Ventas (idEmpleado, idCliente, isv, descuento)
      VALUES (cod_usuario, cod_cliente, 15, 0);
    SET factura = LAST_INSERT_ID();

    INSERT INTO DetalleVentas (idVenta, idProducto, cantidad, precio)
      SELECT
        (factura) AS nofactura,
        idProducto,
        cantidad,
        precio
      FROM detalleTemporal
      WHERE token_user = token;
    WHILE a <= registros DO
      SELECT
        cod_prod,
        cant_prod INTO tmp_cod_producto, tmp_cant_producto
      FROM tbl_tmp_tokenuser
      WHERE id = a;
      SELECT
        cantidadExistencia INTO existencia_actual
      FROM Productos
      WHERE idProducto = tmp_cod_producto;
      SET nueva_existencia = existencia_actual - tmp_cant_producto;
      UPDATE Productos
      SET cantidadExistencia = nueva_existencia
      WHERE idProducto = tmp_cod_producto;
      SET a = a + 1;
    END WHILE;
    SET total = (SELECT
        SUM(cantidad * precio)
      FROM detalleTemporal
      WHERE token_user = token);
    UPDATE Ventas
    SET subTotal = total
    WHERE idVenta = factura;
    TRUNCATE TABLE detalleTemporal;
    TRUNCATE TABLE tbl_tmp_tokenuser;
    SELECT
      *
    FROM Ventas
    WHERE idVenta = factura;
  ELSE
    SELECT
      0;
  END IF;
END
$$

--
-- Create procedure `del_detalle_temp`
--
CREATE
DEFINER = 'luis'@'%'
PROCEDURE del_detalle_temp (`id_detalle` int, `token` varchar(50))
BEGIN
  DELETE
    FROM detalleTemporal
  WHERE idDetalle = id_detalle;
  SELECT
    tmp.idDetalle 'correlativo',
    tmp.idProducto 'codproducto',
    p.nombreProducto 'descripcion',
    tmp.cantidad,
    tmp.precio_venta
  FROM detalleTemporal tmp
    INNER JOIN producto p
      ON tmp.codproducto = p.codproducto
  WHERE tmp.token_user = token;
END
$$

--
-- Create procedure `add_detalle_temp`
--
CREATE
DEFINER = 'luis'@'%'
PROCEDURE add_detalle_temp (`codigo` int, `cantidad` int, `token_user` varchar(50))
BEGIN
  DECLARE precio_actual decimal(10, 2);
  SELECT
    precioVenta INTO precio_actual
  FROM Productos
  WHERE idProducto = codigo;
  INSERT INTO detalleTemporal (token_user, idProducto, cantidad, precio)
    VALUES (token_user, codigo, cantidad, precio_actual);
  SELECT
    tmp.idDetalle 'correlativo',
    tmp.idProducto 'codproducto',
    p.nombreProducto 'descripcion',
    tmp.cantidad 'cantidad',
    tmp.precio 'precio_venta'
  FROM detalleTemporal tmp
    INNER JOIN Productos p
      ON tmp.idProducto = p.idProducto
  WHERE tmp.token_user = token_user;
END
$$

--
-- Create procedure `configuracion`
--
CREATE
DEFINER = 'luis'@'%'
PROCEDURE configuracion ()
BEGIN
  SELECT
    1 'id',
    2580 'dni',
    'Techno Factory' AS nombre,
    'Techno Factory' AS razon_social,
    96362917 'telefono',
    'technofactory07@gmail.com' AS email,
    'Danli - Honduras' AS direccion,
    15 'igv';
END
$$

DELIMITER ;

-- 
-- Dumping data for table Estados
--
INSERT INTO Estados VALUES
(1, 'habilitado'),
(2, 'deshabilitado');

-- 
-- Dumping data for table Marcas
--
INSERT INTO Marcas VALUES
(1, 'Dell', 1),
(2, 'Toshiba', 1),
(3, 'HP', 1),
(4, 'Acer', 1),
(5, 'Apple', 2),
(6, 'Lenovo', 2),
(7, 'Lenovo2', 2),
(8, 'LEN', 1);

-- 
-- Dumping data for table Modelos
--
INSERT INTO Modelos VALUES
(1, 'Notebook', 3, 1),
(2, 'Pavilion', 3, 1),
(3, 'Inspiron', 1, 1),
(4, 'Chromebook ', 1, 1),
(5, 'MacBook', 5, 1),
(6, 'MacBook Air', 5, 1);

-- 
-- Dumping data for table Categorias
--
INSERT INTO Categorias VALUES
(1, 'Súper computadoras', 1),
(2, 'Macro computadoras', 1),
(3, 'Mini computadoras', 1),
(4, 'Micro computadoras', 1),
(5, 'Prueba', NULL),
(6, 'Micro2 computadoras', 1),
(7, 'Samsung', 1),
(8, 'QW', 1);

-- 
-- Dumping data for table Empleados
--
INSERT INTO Empleados VALUES
(1, '0703200003793', 'Luis', 'Flores', 'Masculino', '2000-06-07', '2021-10-20 14:55:37', 1),
(2, '0801200003786', 'Adolfo', 'Castellanos', 'Masculino', '2000-03-07', '2021-10-30 10:08:47', 1),
(3, '2', 'Diego', 'Lopez', 'Masculino', '2000-07-06', '2021-10-31 00:12:09', 1),
(4, '0896065643', 'Allan', 'Mejia', 'Masculino', '2000-09-08', '2021-11-01 21:46:53', 1),
(5, '0704200003798', 'Nayeli', 'Ardon', 'Femenino', '2000-09-07', '2021-11-02 13:04:43', 1),
(6, '07004197702343223', 'Luis', 'Castellanos', 'Masculino', '2000-11-23', '2021-11-02 16:52:54', 1),
(7, '07043000047841', 'Luis Adolfo', 'Flores', 'Masculino', '2000-11-17', '2021-11-07 01:16:39', 1);

-- 
-- Dumping data for table Clientes
--
INSERT INTO Clientes VALUES
(1, '0703200003793', 'Cliente', 'Anonimos', 'Masculino', '2000-08-03', '2021-10-19 01:14:23', 1),
(2, '098976647564', 'Cliente', 'General', 'Masculino', '2000-08-03', '2021-10-28 21:36:30', 1),
(3, '0801568943234', 'Alan', 'Mejia', 'Masculino', '2001-04-22', '2021-11-03 09:41:35', 1),
(4, '13456677885', 'Ignacio N', 'Mejia', 'Masculino', '2001-04-22', '2021-11-05 17:55:01', 1),
(5, '0703200003965', 'Gerson', 'Martinez', 'Masculino', '2000-11-02', '2021-11-07 01:15:41', 1);

-- 
-- Dumping data for table Cargos
--
INSERT INTO Cargos VALUES
(1, 'Administrador'),
(2, 'Vendedor'),
(3, 'Gerente'),
(4, 'Cliente');

-- 
-- Dumping data for table Ventas
--
INSERT INTO Ventas VALUES
(6, '2021-10-27 15:18:18', 1, 1, 15.00, 0.00, NULL),
(7, '2021-10-27 15:22:19', 1, 1, 15.00, 0.00, 67000.00),
(8, '2021-10-27 15:26:13', 1, 1, 15.00, 0.00, 163000.00),
(9, '2021-10-27 15:40:40', 1, 1, 15.00, 0.00, 70000.00),
(10, '2021-10-27 15:42:40', 1, 1, 15.00, 0.00, 140000.00),
(11, '2021-10-27 15:49:58', 1, 1, 15.00, 0.00, 102000.00),
(12, '2021-10-27 15:52:35', 1, 1, 15.00, 0.00, 35000.00),
(13, '2021-10-27 16:00:42', 1, 1, 15.00, 0.00, 70000.00),
(14, '2021-10-27 16:07:36', 1, 1, 15.00, 0.00, 35000.00),
(15, '2021-10-27 16:09:38', 1, 1, 15.00, 0.00, 32000.00),
(16, '2021-10-27 16:10:56', 1, 1, 15.00, 0.00, 35000.00),
(17, '2021-10-27 16:18:29', 1, 1, 15.00, 0.00, 105000.00),
(18, '2021-10-27 16:28:10', 1, 1, 15.00, 0.00, 70000.00),
(19, '2021-10-27 16:39:14', 1, 1, 15.00, 0.00, 35000.00),
(20, '2021-10-27 16:51:39', 1, 1, 15.00, 0.00, 105000.00),
(21, '2021-10-27 17:04:20', 1, 1, 15.00, 0.00, 35000.00),
(22, '2021-10-27 17:05:07', 1, 1, 15.00, 0.00, 35000.00),
(23, '2021-10-27 20:57:03', 1, 1, 15.00, 0.00, 35000.00),
(24, '2021-10-27 21:39:10', 1, 1, 15.00, 0.00, 240000.00),
(25, '2021-10-27 21:45:25', 1, 1, 15.00, 0.00, 45000.00),
(26, '2021-10-28 01:17:44', 1, 1, 15.00, 0.00, 32000.00),
(27, '2021-10-28 01:18:54', 1, 1, 15.00, 0.00, 35000.00),
(28, '2021-10-28 01:19:39', 1, 1, 15.00, 0.00, 45000.00),
(29, '2021-10-28 01:23:43', 1, 1, 15.00, 0.00, 32000.00),
(30, '2021-10-28 01:24:49', 1, 1, 15.00, 0.00, 150000.00),
(31, '2021-10-28 01:26:44', 1, 1, 15.00, 0.00, 32000.00),
(32, '2021-10-28 01:31:12', 1, 1, 15.00, 0.00, 64000.00),
(33, '2021-10-28 01:32:10', 1, 1, 15.00, 0.00, 32000.00),
(34, '2021-10-28 01:33:35', 1, 1, 15.00, 0.00, 64000.00),
(35, '2021-10-28 01:34:24', 1, 1, 15.00, 0.00, 32000.00),
(36, '2021-10-28 01:44:46', 1, 1, 15.00, 0.00, 35000.00),
(37, '2021-10-28 01:48:27', 1, 1, 15.00, 0.00, 35000.00),
(38, '2021-10-28 01:59:39', 1, 1, 15.00, 0.00, 32000.00),
(39, '2021-10-28 02:02:25', 1, 1, 15.00, 0.00, 32000.00),
(40, '2021-10-28 02:04:17', 1, 1, 15.00, 0.00, 32000.00),
(41, '2021-10-28 02:05:05', 1, 1, 15.00, 0.00, 32000.00),
(42, '2021-10-28 02:05:59', 1, 1, 15.00, 0.00, 32000.00),
(43, '2021-10-28 02:07:51', 1, 1, 15.00, 0.00, 32000.00),
(44, '2021-10-28 02:19:13', 1, 1, 15.00, 0.00, 32000.00),
(45, '2021-10-28 03:16:28', 1, 1, 15.00, 0.00, 112000.00),
(46, '2021-10-28 06:07:06', 1, 1, 15.00, 0.00, 112000.00),
(47, '2021-10-28 06:13:50', 1, 1, 15.00, 0.00, 115000.00),
(48, '2021-10-28 07:25:21', 1, 1, 15.00, 0.00, 135000.00),
(49, '2021-10-28 21:21:46', 1, 1, 15.00, 0.00, 67000.00),
(50, '2021-10-28 21:37:48', 2, 1, 15.00, 0.00, 327000.00),
(51, '2021-10-28 21:14:29', 2, 1, 15.00, 0.00, 198000.00),
(52, '2021-10-28 21:31:59', 2, 1, 15.00, 0.00, 32000.00),
(53, '2021-10-28 21:35:56', 2, 1, 15.00, 0.00, 175000.00),
(54, '2021-10-28 21:38:30', 2, 1, 15.00, 0.00, 225000.00),
(55, '2021-10-28 21:46:48', 2, 1, 15.00, 0.00, 32000.00),
(56, '2021-10-28 21:47:51', 2, 1, 15.00, 0.00, 35000.00),
(57, '2021-10-28 21:48:12', 2, 1, 15.00, 0.00, 32000.00),
(58, '2021-10-28 21:49:32', 2, 1, 15.00, 0.00, 144000.00),
(59, '2021-10-28 21:54:19', 2, 1, 15.00, 0.00, 35000.00),
(60, '2021-10-28 21:54:51', 2, 1, 15.00, 0.00, 35000.00),
(61, '2021-10-28 21:56:21', 2, 1, 15.00, 0.00, 70000.00),
(62, '2021-10-28 21:58:49', 2, 1, 15.00, 0.00, 35000.00),
(63, '2021-10-28 21:59:59', 2, 1, 15.00, 0.00, 35000.00),
(64, '2021-10-28 22:00:49', 2, 1, 15.00, 0.00, 32000.00),
(65, '2021-10-28 22:01:15', 2, 1, 15.00, 0.00, 35000.00),
(66, '2021-10-28 22:03:29', 2, 1, 15.00, 0.00, 32000.00),
(67, '2021-10-28 22:03:58', 2, 1, 15.00, 0.00, 32000.00),
(68, '2021-10-28 22:04:40', 2, 1, 15.00, 0.00, 32000.00),
(69, '2021-10-28 22:05:11', 2, 1, 15.00, 0.00, 64000.00),
(70, '2021-10-28 22:08:17', 2, 1, 15.00, 0.00, 45000.00),
(71, '2021-10-28 22:08:39', 2, 1, 15.00, 0.00, 35000.00),
(72, '2021-10-28 22:09:16', 2, 1, 15.00, 0.00, 35000.00),
(73, '2021-10-28 22:12:59', 1, 1, 15.00, 0.00, 394000.00),
(74, '2021-10-30 09:32:29', 2, 1, 15.00, 0.00, 80000.00),
(75, '2021-10-30 17:35:38', 2, 2, 15.00, 0.00, 112000.00),
(76, '2021-10-30 20:12:04', 1, 1, 15.00, 0.00, 169000.00),
(77, '2021-11-01 14:32:16', 1, 1, 15.00, 0.00, 112000.00),
(78, '2021-11-01 14:43:43', 1, 1, 15.00, 0.00, 122000.00),
(79, '2021-11-01 14:44:33', 2, 1, 15.00, 0.00, 32000.00),
(80, '2021-11-01 15:41:39', 2, 1, 15.00, 0.00, 102000.00),
(81, '2021-11-05 21:21:01', 1, 1, 15.00, 0.00, 32000.00),
(82, '2021-11-05 22:34:41', 1, 1, 15.00, 0.00, 115985.00),
(83, '2021-11-07 01:17:19', 1, 1, 15.00, 0.00, 80000.00);

-- 
-- Dumping data for table Productos
--
INSERT INTO Productos VALUES
(1, 'Inspiron 15 5000', 'Laptop de 15 pulgadas que es su centro personal de entretenimiento en el hogar para una visualización envolvente, con un borde estrecho y un procesador Intel® de décima generación.', 0, 4, 1, 32000.00, 32000.00, 3),
(2, 'HP Laptop 15-gw0017la', 'Creada para mantenerte productivo y conectado, la HP Laptop 15 combina batería de larga duración y una pantalla de bordes súper delgado, en un diseño con mucho estilo.', 6, 4, 1, 35000.00, 35000.00, 2),
(3, 'MacBook Pro de 13”', 'Con el chip M1, la MacBook Pro de 13 pulgadas alcanza un nuevo nivel de potencia y velocidad. El CPU es hasta 2.8 veces más rápido y los gráficos son hasta 5 veces más veloces. Nuestro Neural Engine más avanzado hasta ahora permite un aprendizaje automático hasta 11 veces más rápido. Y la batería te acompaña todo el día: hasta 20 horas de duración. Es nuestra notebook Pro más conocida, a un nivel mucho más pro.', 16, 4, 1, 40000.00, 45000.00, 5),
(8, 'Laptop Dell Inspiron 15" ', 'Laptop de 15 pulgadas que ofrece un rendimiento con capacidad de respuesta en un diseño elegante con bordes angostos de dos lados, ExpressCharge, y procesadores Intel Core.  Cap. Disco Duro (5400 RPM) GB - 1 TB Memoria RAM Instalada GB - 4 GB Procesador - Intel Core i3 Resolución Pantalla (Pixeles) - 1366 x 768 Pixeles', 60, 4, 1, 10000.00, 10000.00, 3),
(13, 'Laptop HP 250 G7 15" ', 'Laptop HP 250 G7 15" Intel Core i3 Memoria RAM 4GB/ Disco Duro 1TB Negra\nHP-250-G7\nCap. Disco Duro (5400 RPM) GB - 1 TB\nMemoria RAM Instalada GB - 4GB\nProcesador - Intel Core i3 (10ma generación)\nResolución Pantalla (Pixeles) - 1366 x 768 pixeles', 20, 4, 1, 10000.00, 11995.00, 3);

-- 
-- Dumping data for table Usuarios
--
INSERT INTO Usuarios VALUES
(2, 'Luis', 'luis1234flores', 4, 'luis123@gmail.com', NULL, 1, 0),
(6, 'luis', 'luis1234', 1, 'lf016158@gmail.com', 1, NULL, 1),
(7, 'DiegoL', '12345', 2, 'diego123@gmail.com', 3, NULL, 1),
(8, 'AlanM', '12345678', 3, 'alan123@gmail.com', 4, NULL, 1);

-- 
-- Dumping data for table DetalleVentas
--
INSERT INTO DetalleVentas VALUES
(2, 7, 1, 1, 32000.00),
(3, 7, 2, 1, 35000.00),
(5, 8, 2, 1, 35000.00),
(6, 8, 1, 4, 32000.00),
(8, 9, 2, 2, 35000.00),
(9, 10, 2, 4, 35000.00),
(10, 11, 1, 1, 32000.00),
(11, 11, 2, 2, 35000.00),
(13, 12, 2, 1, 35000.00),
(14, 13, 2, 2, 35000.00),
(15, 14, 2, 1, 35000.00),
(16, 15, 1, 1, 32000.00),
(17, 16, 2, 1, 35000.00),
(18, 17, 2, 3, 35000.00),
(19, 18, 2, 2, 35000.00),
(20, 19, 2, 1, 35000.00),
(21, 20, 2, 3, 35000.00),
(22, 21, 2, 1, 35000.00),
(23, 22, 2, 1, 35000.00),
(24, 23, 2, 1, 35000.00),
(25, 24, 1, 5, 32000.00),
(26, 24, 2, 1, 35000.00),
(27, 24, 3, 1, 45000.00),
(28, 25, 3, 1, 45000.00),
(29, 26, 1, 1, 32000.00),
(30, 27, 2, 1, 35000.00),
(31, 28, 3, 1, 45000.00),
(32, 29, 1, 1, 32000.00),
(33, 30, 3, 1, 45000.00),
(34, 30, 2, 1, 35000.00),
(35, 30, 2, 2, 35000.00),
(36, 31, 1, 1, 32000.00),
(37, 32, 1, 2, 32000.00),
(38, 33, 1, 1, 32000.00),
(39, 34, 1, 2, 32000.00),
(40, 35, 1, 1, 32000.00),
(41, 36, 2, 1, 35000.00),
(42, 37, 2, 1, 35000.00),
(43, 38, 1, 1, 32000.00),
(44, 39, 1, 1, 32000.00),
(45, 40, 1, 1, 32000.00),
(46, 41, 1, 1, 32000.00),
(47, 42, 1, 1, 32000.00),
(48, 43, 1, 1, 32000.00),
(49, 44, 1, 1, 32000.00),
(50, 45, 1, 1, 32000.00),
(51, 45, 2, 1, 35000.00),
(52, 45, 3, 1, 45000.00),
(53, 46, 2, 1, 35000.00),
(54, 46, 1, 1, 32000.00),
(55, 46, 3, 1, 45000.00),
(56, 47, 2, 2, 35000.00),
(57, 47, 3, 1, 45000.00),
(58, 48, 3, 3, 45000.00),
(59, 49, 2, 1, 35000.00),
(60, 49, 1, 1, 32000.00),
(62, 50, 1, 1, 32000.00),
(63, 50, 2, 2, 35000.00),
(64, 50, 3, 5, 45000.00),
(65, 51, 1, 4, 32000.00),
(66, 51, 2, 2, 35000.00),
(68, 52, 1, 1, 32000.00),
(69, 53, 2, 5, 35000.00),
(70, 54, 3, 5, 45000.00),
(71, 55, 1, 1, 32000.00),
(72, 56, 2, 1, 35000.00),
(73, 57, 1, 1, 32000.00),
(74, 58, 1, 2, 32000.00),
(75, 58, 2, 1, 35000.00),
(76, 58, 3, 1, 45000.00),
(77, 59, 2, 1, 35000.00),
(78, 60, 2, 1, 35000.00),
(79, 61, 2, 2, 35000.00),
(80, 62, 2, 1, 35000.00),
(81, 63, 2, 1, 35000.00),
(82, 64, 1, 1, 32000.00),
(83, 65, 2, 1, 35000.00),
(84, 66, 1, 1, 32000.00),
(85, 67, 1, 1, 32000.00),
(86, 68, 1, 1, 32000.00),
(87, 69, 1, 2, 32000.00),
(88, 70, 3, 1, 45000.00),
(89, 71, 2, 1, 35000.00),
(90, 72, 2, 1, 35000.00),
(91, 73, 1, 2, 32000.00),
(92, 73, 2, 3, 35000.00),
(93, 73, 3, 1, 45000.00),
(94, 73, 3, 4, 45000.00),
(98, 74, 2, 1, 35000.00),
(99, 74, 3, 1, 45000.00),
(101, 75, 1, 1, 32000.00),
(102, 75, 2, 1, 35000.00),
(103, 75, 3, 1, 45000.00),
(104, 76, 1, 2, 32000.00),
(105, 76, 2, 3, 35000.00),
(107, 77, 1, 1, 32000.00),
(108, 77, 2, 1, 35000.00),
(109, 77, 3, 1, 45000.00),
(110, 78, 1, 1, 32000.00),
(111, 78, 3, 2, 45000.00),
(113, 79, 1, 1, 32000.00),
(114, 80, 2, 2, 35000.00),
(115, 80, 1, 1, 32000.00),
(116, 81, 1, 1, 32000.00),
(117, 82, 2, 1, 35000.00),
(118, 82, 3, 1, 45000.00),
(119, 82, 13, 3, 11995.00),
(120, 83, 2, 1, 35000.00),
(121, 83, 3, 1, 45000.00);

-- 
-- Dumping data for table detalleTemporal
--
-- Table bd_techno_factory.detalleTemporal does not contain any data (it is empty)

-- 
-- Restore previous SQL mode
-- 
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS = @OLD_FOREIGN_KEY_CHECKS */;